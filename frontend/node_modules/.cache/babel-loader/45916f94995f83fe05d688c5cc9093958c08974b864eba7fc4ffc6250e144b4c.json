{"ast":null,"code":"import axios from 'axios';\nimport toast from 'react-hot-toast';\nclass ApiClient {\n  constructor() {\n    this.client = void 0;\n    this.getToken = null;\n    this.client = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\n      timeout: 30000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.client.interceptors.request.use(async config => {\n      if (this.getToken) {\n        const token = await this.getToken();\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Response interceptor for error handling\n    this.client.interceptors.response.use(response => response, error => {\n      this.handleError(error);\n      return Promise.reject(error);\n    });\n  }\n\n  // Method to set the token getter function\n  setTokenGetter(getToken) {\n    this.getToken = getToken;\n  }\n  handleError(error) {\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n      switch (status) {\n        case 401:\n          toast.error('Authentication required. Please log in.');\n          break;\n        case 403:\n          toast.error('Access denied. You do not have permission.');\n          break;\n        case 404:\n          toast.error('Resource not found.');\n          break;\n        case 422:\n          toast.error(data.error || 'Validation error');\n          break;\n        case 500:\n          toast.error('Server error. Please try again later.');\n          break;\n        default:\n          toast.error(data.error || 'An unexpected error occurred');\n      }\n    } else if (error.request) {\n      toast.error('Network error. Please check your connection.');\n    } else {\n      toast.error('An unexpected error occurred');\n    }\n  }\n\n  // Health Check\n  async getHealth() {\n    const response = await this.client.get('/health');\n    return response.data;\n  }\n\n  // Profile API\n  async getProfile() {\n    const response = await this.client.get('/profile');\n    return response.data;\n  }\n  async updateProfile(profile) {\n    const response = await this.client.put('/profile', profile);\n    return response.data;\n  }\n  async uploadProfilePicture(file) {\n    const formData = new FormData();\n    formData.append('profilePicture', file);\n    const response = await this.client.post('/profile/picture', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n  async uploadResume(file) {\n    const formData = new FormData();\n    formData.append('resumeFile', file);\n    const response = await this.client.post('/profile/resume', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n\n  // Recommendation API\n  async createRecommendation(ikigaiData) {\n    const response = await this.client.post('/recommendation', ikigaiData);\n    return response.data;\n  }\n\n  // Job Search API\n  async searchJobs(searchData) {\n    const response = await this.client.post('/jobs/search', searchData);\n    return response.data;\n  }\n\n  // Roadmap API\n  async createRoadmap(jobDetails) {\n    const response = await this.client.post('/roadmaps', jobDetails);\n    return response.data;\n  }\n  async updateRoadmapTask(roadmapId, taskUpdate) {\n    const response = await this.client.put(`/roadmaps/${roadmapId}/task`, taskUpdate);\n    return response.data;\n  }\n\n  // Chat API\n  async getChatSessions() {\n    const response = await this.client.get('/chat/sessions');\n    return response.data;\n  }\n  async createChatSession() {\n    const response = await this.client.post('/chat/sessions');\n    return response.data;\n  }\n  async getChatSession(sessionId) {\n    const response = await this.client.get(`/chat/sessions/${sessionId}`);\n    return response.data;\n  }\n  async sendChatMessage(sessionId, message) {\n    const response = await this.client.post(`/chat/sessions/${sessionId}/messages`, message);\n    return response.data;\n  }\n\n  // Knowledge API\n  async uploadKnowledgeDocument(file) {\n    const formData = new FormData();\n    formData.append('document', file);\n    const response = await this.client.post('/knowledge/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n}\n\n// Create and export a singleton instance\nexport const apiClient = new ApiClient();\n\n// Export individual methods for convenience\nexport const {\n  getHealth,\n  getProfile,\n  updateProfile,\n  uploadProfilePicture,\n  uploadResume,\n  createRecommendation,\n  searchJobs,\n  createRoadmap,\n  updateRoadmapTask,\n  getChatSessions,\n  createChatSession,\n  getChatSession,\n  sendChatMessage,\n  uploadKnowledgeDocument\n} = apiClient;","map":{"version":3,"names":["axios","toast","ApiClient","constructor","client","getToken","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","Authorization","error","Promise","reject","response","handleError","setTokenGetter","status","data","getHealth","get","getProfile","updateProfile","profile","put","uploadProfilePicture","file","formData","FormData","append","post","uploadResume","createRecommendation","ikigaiData","searchJobs","searchData","createRoadmap","jobDetails","updateRoadmapTask","roadmapId","taskUpdate","getChatSessions","createChatSession","getChatSession","sessionId","sendChatMessage","message","uploadKnowledgeDocument","apiClient"],"sources":["D:/pooja/projects/gen ai/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\r\nimport toast from 'react-hot-toast';\r\nimport {\r\n  IkigaiInput,\r\n  RecommendationResponse,\r\n  UserProfile,\r\n  ProfileUploadResponse,\r\n  JobSearchForm,\r\n  JobSearchOutput,\r\n  JobDetails,\r\n  RoadmapUpdate,\r\n  ChatSession,\r\n  ChatMessage,\r\n  ChatInput,\r\n  ChatResponse,\r\n  SessionResponse,\r\n  HealthStatus,\r\n  ApiResponse,\r\n} from '../types';\r\n\r\nclass ApiClient {\r\n  private client: AxiosInstance;\r\n  private getToken: (() => Promise<string | null>) | null = null;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\r\n      timeout: 30000,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Request interceptor to add auth token\r\n    this.client.interceptors.request.use(\r\n      async (config) => {\r\n        if (this.getToken) {\r\n          const token = await this.getToken();\r\n          if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n          }\r\n        }\r\n        return config;\r\n      },\r\n      (error) => {\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n\r\n    // Response interceptor for error handling\r\n    this.client.interceptors.response.use(\r\n      (response) => response,\r\n      (error) => {\r\n        this.handleError(error);\r\n        return Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Method to set the token getter function\r\n  setTokenGetter(getToken: () => Promise<string | null>) {\r\n    this.getToken = getToken;\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    if (error.response) {\r\n      const { status, data } = error.response;\r\n      \r\n      switch (status) {\r\n        case 401:\r\n          toast.error('Authentication required. Please log in.');\r\n          break;\r\n        case 403:\r\n          toast.error('Access denied. You do not have permission.');\r\n          break;\r\n        case 404:\r\n          toast.error('Resource not found.');\r\n          break;\r\n        case 422:\r\n          toast.error(data.error || 'Validation error');\r\n          break;\r\n        case 500:\r\n          toast.error('Server error. Please try again later.');\r\n          break;\r\n        default:\r\n          toast.error(data.error || 'An unexpected error occurred');\r\n      }\r\n    } else if (error.request) {\r\n      toast.error('Network error. Please check your connection.');\r\n    } else {\r\n      toast.error('An unexpected error occurred');\r\n    }\r\n  }\r\n\r\n  // Health Check\r\n  async getHealth(): Promise<HealthStatus> {\r\n    const response = await this.client.get<HealthStatus>('/health');\r\n    return response.data;\r\n  }\r\n\r\n  // Profile API\r\n  async getProfile(): Promise<UserProfile> {\r\n    const response = await this.client.get<UserProfile>('/profile');\r\n    return response.data;\r\n  }\r\n\r\n  async updateProfile(profile: Partial<UserProfile>): Promise<UserProfile> {\r\n    const response = await this.client.put<UserProfile>('/profile', profile);\r\n    return response.data;\r\n  }\r\n\r\n  async uploadProfilePicture(file: File): Promise<ProfileUploadResponse> {\r\n    const formData = new FormData();\r\n    formData.append('profilePicture', file);\r\n    \r\n    const response = await this.client.post<ProfileUploadResponse>(\r\n      '/profile/picture',\r\n      formData,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  async uploadResume(file: File): Promise<ProfileUploadResponse> {\r\n    const formData = new FormData();\r\n    formData.append('resumeFile', file);\r\n    \r\n    const response = await this.client.post<ProfileUploadResponse>(\r\n      '/profile/resume',\r\n      formData,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // Recommendation API\r\n  async createRecommendation(ikigaiData: IkigaiInput): Promise<RecommendationResponse> {\r\n    const response = await this.client.post<RecommendationResponse>('/recommendation', ikigaiData);\r\n    return response.data;\r\n  }\r\n\r\n  // Job Search API\r\n  async searchJobs(searchData: JobSearchForm): Promise<JobSearchOutput> {\r\n    const response = await this.client.post<JobSearchOutput>('/jobs/search', searchData);\r\n    return response.data;\r\n  }\r\n\r\n  // Roadmap API\r\n  async createRoadmap(jobDetails: JobDetails): Promise<RoadmapUpdate> {\r\n    const response = await this.client.post<RoadmapUpdate>('/roadmaps', jobDetails);\r\n    return response.data;\r\n  }\r\n\r\n  async updateRoadmapTask(roadmapId: string, taskUpdate: RoadmapUpdate): Promise<{ message: string }> {\r\n    const response = await this.client.put<{ message: string }>(\r\n      `/roadmaps/${roadmapId}/task`,\r\n      taskUpdate\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // Chat API\r\n  async getChatSessions(): Promise<ChatSession[]> {\r\n    const response = await this.client.get<ChatSession[]>('/chat/sessions');\r\n    return response.data;\r\n  }\r\n\r\n  async createChatSession(): Promise<SessionResponse> {\r\n    const response = await this.client.post<SessionResponse>('/chat/sessions');\r\n    return response.data;\r\n  }\r\n\r\n  async getChatSession(sessionId: string): Promise<ChatMessage[]> {\r\n    const response = await this.client.get<ChatMessage[]>(`/chat/sessions/${sessionId}`);\r\n    return response.data;\r\n  }\r\n\r\n  async sendChatMessage(sessionId: string, message: ChatInput): Promise<ChatResponse> {\r\n    const response = await this.client.post<ChatResponse>(\r\n      `/chat/sessions/${sessionId}/messages`,\r\n      message\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // Knowledge API\r\n  async uploadKnowledgeDocument(file: File): Promise<{ message: string }> {\r\n    const formData = new FormData();\r\n    formData.append('document', file);\r\n    \r\n    const response = await this.client.post<{ message: string }>(\r\n      '/knowledge/upload',\r\n      formData,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nexport const apiClient = new ApiClient();\r\n\r\n// Export individual methods for convenience\r\nexport const {\r\n  getHealth,\r\n  getProfile,\r\n  updateProfile,\r\n  uploadProfilePicture,\r\n  uploadResume,\r\n  createRecommendation,\r\n  searchJobs,\r\n  createRoadmap,\r\n  updateRoadmapTask,\r\n  getChatSessions,\r\n  createChatSession,\r\n  getChatSession,\r\n  sendChatMessage,\r\n  uploadKnowledgeDocument,\r\n} = apiClient;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}