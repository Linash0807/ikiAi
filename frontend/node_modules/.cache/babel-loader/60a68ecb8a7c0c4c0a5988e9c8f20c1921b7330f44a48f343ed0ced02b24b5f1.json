{"ast":null,"code":"var _jsxFileName = \"D:\\\\pooja\\\\projects\\\\gen ai\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setUser(user);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      await signInWithEmailAndPassword(auth, email, password);\n      toast.success('Successfully logged in!');\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to log in';\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async (email, password, fullName) => {\n    try {\n      setLoading(true);\n      const {\n        user\n      } = await createUserWithEmailAndPassword(auth, email, password);\n      await updateProfile(user, {\n        displayName: fullName\n      });\n      toast.success('Account created successfully!');\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to create account';\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await signOut(auth);\n      toast.success('Successfully logged out!');\n    } catch (error) {\n      const errorMessage = error.message || 'Failed to log out';\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getIdToken = async () => {\n    if (!user) return null;\n    try {\n      return await user.getIdToken();\n    } catch (error) {\n      console.error('Error getting ID token:', error);\n      return null;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    getIdToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","auth","toast","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","unsubscribe","login","email","password","success","error","errorMessage","message","register","fullName","displayName","logout","getIdToken","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/pooja/projects/gen ai/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\r\nimport { \r\n  User, \r\n  signInWithEmailAndPassword, \r\n  createUserWithEmailAndPassword, \r\n  signOut, \r\n  onAuthStateChanged,\r\n  updateProfile\r\n} from 'firebase/auth';\r\nimport { auth } from '../config/firebase';\r\nimport toast from 'react-hot-toast';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (email: string, password: string, fullName: string) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  getIdToken: () => Promise<string | null>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\r\n      setUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      setLoading(true);\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n      toast.success('Successfully logged in!');\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to log in';\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (email: string, password: string, fullName: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const { user } = await createUserWithEmailAndPassword(auth, email, password);\r\n      await updateProfile(user, { displayName: fullName });\r\n      toast.success('Account created successfully!');\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to create account';\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await signOut(auth);\r\n      toast.success('Successfully logged out!');\r\n    } catch (error: any) {\r\n      const errorMessage = error.message || 'Failed to log out';\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getIdToken = async (): Promise<string | null> => {\r\n    if (!user) return null;\r\n    try {\r\n      return await user.getIdToken();\r\n    } catch (error) {\r\n      console.error('Error getting ID token:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    getIdToken,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}